# Определяем переменные на основе значений из value
{{- define "airflow.fullname" -}}
  airflow
{{- end }}

{{- define "fernet_key_secret" -}}
  {{- printf "%s-fernet-key" .Release.Name}}
{{- end }}

{{- define "airflow_metadata_secret" -}}
  {{- (printf "%s-metadata" .Release.Name)}}
{{- end }}

{{- define "webserver_secret_key_secret" -}}
  {{- (printf "%s-webserver-secret-key" .Release.Name) }}
{{- end }}

{{- define "airflow_config_path" -}}
  {{- printf "%s/airflow.cfg" .Values.airflowHome | quote }}
{{- end }}

{{ define "airflow_image_for_migrations" -}}
  {{- template "airflow_image" . }}
{{- end }}

{{- define "redis_image" -}}
  {{- printf "%s:%s" .Values.images.redis.repository .Values.images.redis.tag }}
{{- end }}

{{- define "redis_password_secret" -}}
  {{- printf "%s-redis-password" .Release.Name }}
{{- end }}

{{- define "airflow_dags" -}}
    {{- printf "%s/dags/repo" .Values.airflowHome }}
{{- end }}

{{- define "airflow_logs" -}}
  {{- printf "%s/logs" .Values.airflowHome | quote }}
{{- end }}

{{- define "airflow_config" -}}
  {{- printf "%s-airflow-config" .Release.Name }}
{{- end }}


# Задаем полное название aifloe образа
{{- define "airflow_image" -}}
  {{- $repository := .Values.images.airflow.repository -}}
  {{- $tag := .Values.images.airflow.tag -}}
    {{- printf "%s:%s" $repository $tag -}}
{{- end }}


# Создаем шаблон для монтирования config в поды
{{- define "airflow_config_mount" -}}
- name: config
  mountPath: {{ template "airflow_config_path" . }}
  subPath: airflow.cfg
  readOnly: true
{{- end }}


# Создаем шаблон для используемых переменных окружения
{{- define "standard_airflow_environment" }}
  {{- if .Values.enableBuiltInSecretEnvVars.AIRFLOW__CORE__FERNET_KEY }}
  - name: AIRFLOW__CORE__FERNET_KEY
    valueFrom:
      secretKeyRef:
        name: {{ template "fernet_key_secret" . }}
        key: fernet-key
  {{- end }}
  {{- if .Values.enableBuiltInSecretEnvVars.AIRFLOW__CORE__SQL_ALCHEMY_CONN }}
  - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
    valueFrom:
      secretKeyRef:
        name: {{ template "airflow_metadata_secret" . }}
        key: connection
  {{- end }}
  {{- if .Values.enableBuiltInSecretEnvVars.AIRFLOW__DATABASE__SQL_ALCHEMY_CONN }}
  - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
    valueFrom:
      secretKeyRef:
        name: {{ template "airflow_metadata_secret" . }}
        key: connection
  {{- end }}
  {{- if .Values.enableBuiltInSecretEnvVars.AIRFLOW_CONN_AIRFLOW_DB }}
  - name: AIRFLOW_CONN_AIRFLOW_DB
    valueFrom:
      secretKeyRef:
        name: {{ template "airflow_metadata_secret" . }}
        key: connection
  {{- end }}
  {{- if .Values.enableBuiltInSecretEnvVars.AIRFLOW__WEBSERVER__SECRET_KEY }}
  - name: AIRFLOW__WEBSERVER__SECRET_KEY
    valueFrom:
      secretKeyRef:
        name: {{ template "webserver_secret_key_secret" . }}
        key: webserver-secret-key
  {{- end }}
  {{- if or (eq .Values.executor "CeleryExecutor") (eq .Values.executor "CeleryKubernetesExecutor") }}
    {{- if .Values.enableBuiltInSecretEnvVars.AIRFLOW__CELERY__BROKER_URL }}
  - name: AIRFLOW__CELERY__BROKER_URL
    valueFrom:
      secretKeyRef:
        name: {{ default (printf "%s-broker-url" .Release.Name) .Values.data.brokerUrlSecretName }}
        key: connection
    {{- end }}
  {{- end }}
  - name: AIRFLOW__CORE__LOAD_EXAMPLES
    value: {{ .Values.config.core.load_examples | quote}}
{{- end }}


# Задаем команду для миграций
{{- define "wait-for-migrations-command" }}
  - airflow
  - db
  - check-migrations
  - --migration-wait-timeout= {{ .Values.migrationsWaitTimeout }}
{{- end }}


# Задаем команду для проверки состояния планировщика 
{{- define "scheduler_liveness_check_command" }}
  - sh
  - -c
  - |
    CONNECTION_CHECK_MAX_COUNT=0 AIRFLOW__LOGGING__LOGGING_LEVEL=ERROR exec /entrypoint \
    airflow jobs check --job-type SchedulerJob --local
{{- end }}


# Наименование образа для git-sync
{{- define "git_sync_image" -}}
  {{- printf "%s:%s" .Values.images.gitSync.repository .Values.images.gitSync.tag }}
{{- end }}

# Создаем шаблон для gitsync ssh key volume
{{- define "git_sync_ssh_key_volume" }}
- name: git-sync-ssh-key
  secret:
    secretName: {{ .Values.dags.gitSync.sshKeySecret }}
    defaultMode: 256
{{- end }}

# Создаем шаблон для gitsync
{{- define "git_sync_container" }}
- name: {{ .Values.dags.gitSync.containerName }}
  image: {{ template "git_sync_image" . }}
  imagePullPolicy: {{ .Values.images.gitSync.pullPolicy }}
  securityContext:
      runAsUser: 65533
  env:
    - name: GITSYNC_SSH_KEY_FILE
      value: "/etc/git-secret/ssh"
    - name: GITSYNC_SSH_KNOWN_HOSTS
      value: "false"
    - name: GITSYNC_REF
      value: {{ .Values.dags.gitSync.branch | quote }}
    - name: GITSYNC_REPO
      value: {{ .Values.dags.gitSync.repo | quote }}
    - name: GITSYNC_ROOT
      value: "/git"
    - name: GITSYNC_LINK
      value: "repo"
    - name: GITSYNC_PERIOD
      value: {{ .Values.dags.gitSync.wait | quote }}
    - name: GITSYNC_MAX_FAILURES
      value: {{ .Values.dags.gitSync.maxFailures | quote }}
  volumeMounts:
  - name: dags
    mountPath: /git
  - name: git-sync-ssh-key
    mountPath: /etc/git-secret/ssh
    readOnly: true
    subPath: gitSshKey
{{- end }}